package myPackage;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.Scanner;

public class SquareMatrix {
	
	public int size;
	public int[][] matrix;
	public int[][] rotatedMatrix;
	

	public SquareMatrix() {
		super();
		// TODO Auto-generated constructor stub
	}


	public SquareMatrix(int size, int[][] matrix, int[][] rotatedMatrix) {
		super();
		this.size = size;
		this.matrix = matrix;
		this.rotatedMatrix = rotatedMatrix;
	}


	public int getSize() {
		return size;
	}


	public void setSize(int size) {
		this.size = size;
	}


	public int[][] getMatrix() {
		return matrix;
	}


	public void setMatrix(int[][] matrix) {
		this.matrix = matrix;
	}


	public int[][] getRotatedMatrix() {
		return rotatedMatrix;
	}


	public void setRotatedMatrix(int[][] rotatedMatrix) {
		this.rotatedMatrix = rotatedMatrix;
	}

	
	public int[][] fillMatrix(){
		Scanner input = new Scanner(System.in);
		System.out.println("Enter th size of the matrix(NxN) -> a number from 2 to 9!");
		byte size = input.nextByte();
		int[][] matrix = new int[size][size];
        System.out.print("Enter the elements of a matrix row by row:");
        for (int row = 0; row < matrix.length; row++){
           for (int col = 0; col < matrix[row].length; col++){
              matrix[row][col] = input.nextInt();
        }
        
        }
        input.close();
        return matrix;
	}

	public int[][] rotateMatrix(int[][] matrix)
	{
	    int row = matrix.length;
	    int col = matrix[0].length;
	    int[][] rotated = new int[col][row];
	    for (int i = 0; i < col; ++i) {
	        for (int j = 0; j < row; ++j) {
	            rotated[i][j] = matrix[row - j - 1][i];
	        }
	    }
	    setRotatedMatrix(rotated);
	    return rotated;
	}

	public void writeMatrixInFile(int[][] matrix){

		String path = "../rotatedMatrix.txt";
		
		try {
					FileWriter fileStream = new FileWriter(path);	
					BufferedWriter writer = new BufferedWriter(fileStream);
					for(int i=0;i<matrix.length;i++){
					for(int j=0;j<matrix[i].length;j++){
						writer.write(Integer.toString(matrix[i][j])+" ");
					}
					writer.newLine();
					
					}
					writer.close();
			}
			catch (Exception e) {
				System.out.println("Error while writing a file!!!");
				System.out.println(e.getMessage());
			}
	}
	
	public void menu(){
		System.out.println("\t\t\tPlease choose between:\n\n");
		System.out.println("\t\t\t1. Rotate the matrix and write it into file.\n\t\t\t2.Find the sum of the biggest numbers on each row,column and diagonals.");
	}
	
	public  int findBiggestNumbers(int[][] matrix){
		int sum = 0;
//		for (int i = 0; i < matrix.length; i++) {
//	        int maxInRow = matrix[i][0];
//	        for (int j = 0; j < matrix[i].length; j++) {
//
//	            if (maxInRow < matrix[i][j]) {
//	                maxInRow = matrix[i][j];
//	            }
//	        }
//	        sum+=maxInRow;
//	        maxInRow = matrix[i][0];
//	    }

		
//		for (int i = 0; i < matrix[0].length; i++) {
//	        int maxInCol = matrix[0][i];
//	        for (int j = 0; j < matrix.length; j++) {
//
//	            if (maxInCol < matrix[j][i]) {
//	            	maxInCol = matrix[j][i];
//	            }
//	        }
//	        sum+=maxInCol;
//	        maxInCol = matrix[0][i];
//	    }
//		
//		

//		
//		int maxInMainDiag = matrix[0][0];
//		for (int i = 0; i < matrix.length; i++) {
//	            if (maxInMainDiag < matrix[i][i]) {
//	            	maxInMainDiag = matrix[i][i];
//	            }
//	    }
//		sum+=maxInMainDiag;
		
		
		int maxInMainDiag = 0;
		for (int i=matrix.length; i >0 ; i--) {
			
	            if (maxInMainDiag < matrix[i][i]) {
	            	maxInMainDiag = matrix[i][i];
	            }
	    }
		sum+=maxInMainDiag;
		
		return sum;
		
		
			}
	}
