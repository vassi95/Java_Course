package stackAndQueue;

import java.util.ArrayList;

public class Dequeue {
//	private ArrayList<Integer> myDeque = new ArrayList<Integer>();
//	
//	public void insertAtBeg(int number) {
//		System.out.printf("%d will be added in the beginning\n",number);
//		myDeque.add(0, number);
//		System.out.println(myDeque);
//	}
//
//	public void insertAtEnd(int number) {
//		System.out.printf("%d will be added in the end\n",number);
//		myDeque.add(number);
//		System.out.println(myDeque);
//	}
//
//	public void removeFromBeg() {
//		if (myDeque.isEmpty()) {
//			System.out.println("You tried to delete an element but the deque is already empty!");
//			return;
//		}
//
//		int removeFirst = myDeque.remove(0);
//		System.out.printf("%d will be removed from the beginning.\n",removeFirst);
//		System.out.println(myDeque);
//	}
//
//	public void removeFromEnd() {
//		if (myDeque.isEmpty()) {
//			System.out.println("You tried to delete an element but the deque is already empty!");
//			return;
//		}
//		int removeLast = myDeque.remove(myDeque.size() - 1);
//		System.out.printf("%d will be removed from the end\n",removeLast);
//		System.out.println(myDeque);
//	}
//	
//
//	public static void main(String a[]) {
//
//		Dequeue deque = new Dequeue();
//		deque.insertAtBeg(1);
//		System.out.println();
//		deque.insertAtEnd(2);
//		System.out.println();
//		deque.removeFromBeg();
//		System.out.println();
//		deque.removeFromBeg();
//		System.out.println();
//		deque.removeFromBeg();
//		System.out.println();
//		deque.insertAtBeg(3);
//		System.out.println();
//		deque.insertAtBeg(4);
//		System.out.println();
//		deque.insertAtEnd(5);
//		System.out.println();
//		deque.insertAtBeg(6);
//		System.out.println();
//		deque.removeFromEnd();
//		System.out.println();
//		deque.removeFromBeg();
//	}
	
	
	private Node<Integer> front;
    private Node<Integer> rear;
     
    public void insertFront(Integer item){
        //add element at the beginning of the queue
        System.out.println("adding at front: "+item);
        Node<Integer> nd = new Node<Integer>();
        nd.setValue(item);
        nd.setNext(front);
        if(front != null) front.setPrev(nd);
        if(front == null) rear = nd;
        front = nd;
    }
     
    public void insertRear(Integer item){
        //add element at the end of the queue
        System.out.println("adding at rear: "+item);
        Node<Integer> nd = new Node<Integer>();
        nd.setValue(item);
        nd.setPrev(rear);
        if(rear != null) rear.setNext(nd);
        if(rear == null) front = nd;
         
        rear = nd;
    }
     
    public void removeFront(){
        if(front == null){
            System.out.println("Deque underflow!! unable to remove.");
            return;
        }
        //remove an item from the beginning of the queue
        Node<Integer> tmpFront = front.getNext();
        if(tmpFront != null) tmpFront.setPrev(null);
        if(tmpFront == null) rear = null;
        System.out.println("removed from front: "+front.getValue());
        front = tmpFront;
    }
     
    public void removeRear(){
        if(rear == null){
            System.out.println("Deque underflow!! unable to remove.");
            return;
        }
        //remove an item from the beginning of the queue
        Node<Integer> tmpRear = rear.getPrev();
        if(tmpRear != null) tmpRear.setNext(null);
        if(tmpRear == null) front = null;
        System.out.println("removed from rear: "+rear.getValue());
        rear = tmpRear;
    }
     
    public static void main(String a[]){
        Dequeue deque = new Dequeue();
        deque.insertFront(34);
        deque.insertFront(67);
        deque.insertFront(29);
        deque.insertFront(765);
        deque.removeFront();
        deque.removeFront();
        deque.removeFront();
        deque.insertRear(43);
        deque.insertRear(83);
        deque.insertRear(84);
        deque.insertRear(546);
        deque.insertRear(356);
        deque.removeRear();
        deque.removeRear();
        deque.removeRear();
        deque.removeRear();
        deque.removeFront();
        deque.removeFront();
        deque.removeFront();
    }
}
 
class Node<T>{
     
    private Node<T> prev;
    private Node<T> next;
    private T value;
     
    public Node<T> getPrev() {
        return prev;
    }
    public void setPrev(Node<T> prev) {
        this.prev = prev;
    }
    public Node<T> getNext() {
        return next;
    }
    public void setNext(Node<T> next) {
        this.next = next;
    }
    public T getValue() {
        return value;
    }
    public void setValue(T value) {
        this.value = value;
    }

}
